// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  PollResponse      PollResponse[]
  address       String
  city          String
  state         String
  zip           String
  signedPetition Boolean   @default(false)
  language      String
}


// Models based on schema.prisma
model PollResponse {
  id                Int      @id @default(autoincrement())
  userId            String
  desiredAllocation Float
  actualAllocation  Float
  user              User     @relation(fields: [userId], references: [id])
}

model Referral {
  id          Int      @id @default(autoincrement())
  referrerId  String
  referredId  String
  createdAt   DateTime @default(now())
  referrer    User     @relation(name: "Referrer", fields: [referrerId], references: [id])
  referred    User     @relation(name: "Referred", fields: [referredId], references: [id])
}

model Gamification {
  id          Int      @id @default(autoincrement())
  userId      String
  points      Int
  badges      Json
  updatedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}