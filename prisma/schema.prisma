generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String    @id @default(cuid())
  address              String?
  badges               Json?
  banned               Boolean?
  bio                  String?   @db.Text // User's bio or description
  birthday             DateTime?
  blog                 String?   @map("blog")
  city                 String?
  company              String?   @map("company")
  contributorsEnabled  Boolean?  @map("contributors_enabled")
  countryCode          String?   @map("country_code")
  createdAt            DateTime  @default(now()) @map("created_at")
  createdAtTwitter     DateTime? @map("created_at_twitter")
  deletedAt            DateTime? @map("deleted_at")
  email                String?   @unique
  emailVerified        DateTime? @map("email_verified")
  favouritesCount      Int?      @map("favourites_count")
  firstName            String?   @map("first_name")
  followersCount       Int?      @map("followers_count") // Number of followers
  followingCount       Int?      @map("following_count") // Number of accounts the user is following
  gdprConsent          Boolean   @default(false) @map("gdpr_consent")
  gender               String?
  geoEnabled           Boolean?  @map("geo_enabled")
  githubUsername       String?   @map("github_username")
  hireable             Boolean?  @map("hireable")
  image                String?
  ipAddress            String?   @map("ip_address") @db.VarChar(45)
  language             String?
  lastName             String?   @map("last_name")
  lastSignInAt         BigInt?   @map("last_sign_in_at")
  likeCount            Int?      @map("like_count") // Number of likes
  listedCount          Int?      @map("listed_count")
  location             String? // User's location as per their Twitter profile
  name                 String?   @map("name")
  newsletterSubscribed Boolean   @default(false) @map("newsletter_subscribed")
  phoneNumber          String?   @map("phone_number")
  points               Int?
  postalCode           String?   @map("postal_code")
  privateMetadata      Json?     @map("private_metadata")
  profileBannerUrl     String?   @map("profile_banner_url")
  protected            Boolean?  @map("protected")
  publicMetadata       Json?     @map("public_metadata")
  referrerUserId       String?   @map("referrer_user_id")
  signatureTimestamp   DateTime  @default(now()) @map("signature_timestamp")
  signedPetition       Boolean   @default(false) @map("signed_petition")
  stateProvince        String?   @map("state_province")
  statusesCount        Int?      @map("statuses_count")
  timeZone             String?   @map("time_zone")
  tweetCount           Int?      @map("tweet_count") // Number of tweets (including retweets)
  twitterHandle        String?   @map("twitter_handle") // Twitter username/handle
  type                 String?   @map("type")
  unsafeMetadata       Json?     @map("unsafe_metadata")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  username             String    @unique @default(uuid())
  verified             Boolean?  @map("verified")
  warPercentageDesired Float?    @map("war_percentage_desired")
  warPercentageGuessed Float?    @map("war_percentage_guessed")
  web3Wallet           String?   @map("web3_wallet")
  website              String?   @map("website")

  accounts                        Account[]
  sessions                        Session[]
  activities                      Activity[]
  wishingWells                    WishingWell[]
  educations                      Education[]
  positions                       Position[]
  skills                          Skill[]
  endorsements                    Endorsement[]
  userRecommendations             Recommendation[]              @relation("UserRecommendations")
  recommenderRecommendations      Recommendation[]              @relation("RecommenderRecommendations")
  posts                           Post[]
  likes                           Like[]
  comments                        Comment[]
  initiatedFriendships            Friendship[]                  @relation(name: "InitiatorFriendships")
  receivedFriendships             Friendship[]                  @relation(name: "ReceiverFriendships")
  createdGenieDAOs                GenieDAO[]                    @relation("CreatedGenieDAOs")
  joinedGenieDAOs                 GenieDAO[]                    @relation("JoinedGenieDAOs")
  createdWishFulfillmentProposals WishFulfillmentProposal[]     @relation("CreatedProposals")
  createdProposalProgressReports  ProposalProgressReport[]
  proposalComparisons             ProposalComparison[]
  wishingWellPairAllocations      WishingWellPairAllocation[]
  globalProblemPairAllocations    GlobalProblemPairAllocation[]
  globalProblems                  GlobalProblem[]
  globalProblemVotes              GlobalProblemVote[]
  globalSolutions                 GlobalSolution[]
  globalSolutionVotes             GlobalSolutionVote[]
  globalTasks                     GlobalTask[]
  userTasks                       UserTask[]
  bids                            Bid[]
  rewards                         Reward[]
  genieDAOFeedback                GenieDAOFeedback[]

  @@map("users")
}

model Education {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  school       String
  degree       String?
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime?

  @@map("educations")
}

model Position {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  title     String
  company   String
  startDate DateTime
  endDate   DateTime?
  isCurrent Boolean

  @@map("positions")
}

model Skill {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  name         String
  endorsements Endorsement[]

  @@map("skills")
}

model Endorsement {
  id      String @id @default(cuid())
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@map("endorsements")
}

model Recommendation {
  id            String @id @default(cuid())
  user          User   @relation(name: "UserRecommendations", fields: [userId], references: [id])
  userId        String
  recommenderId String
  recommender   User   @relation(name: "RecommenderRecommendations", fields: [recommenderId], references: [id])
  text          String

  @@map("recommendations")
}

model Post {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]

  @@map("posts")
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Friendship {
  id        String   @id @default(cuid())
  user      User     @relation(name: "InitiatorFriendships", fields: [userId], references: [id])
  userId    String
  friendId  String
  friend    User     @relation(name: "ReceiverFriendships", fields: [friendId], references: [id])
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("friendships")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Activity {
  id           String        @id @default(cuid())
  userId       String        @map("user_id")
  name         String
  description  String?
  colorCode    String        @map("color_code")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id])
  activityLogs ActivityLog[]

  @@map("activities")
}

model ActivityLog {
  id         String   @id @default(cuid())
  activityId String   @map("activity_id")
  date       DateTime @default(now())
  count      Int      @default(1)
  activity   Activity @relation(fields: [activityId], references: [id])

  @@map("activity_log")
}

model GlobalProblem {
  id                           String                        @id @default(cuid())
  userId                       String                        @map("user_id")
  name                         String                        @unique
  description                  String?
  content                      String?
  featuredImage                String?                       @map("featured_image")
  createdAt                    DateTime                      @default(now()) @map("created_at")
  updatedAt                    DateTime                      @updatedAt @map("updated_at")
  thisGlobalProblemAllocations GlobalProblemPairAllocation[] @relation("ThisGlobalProblemRelation")
  thatGlobalProblemAllocations GlobalProblemPairAllocation[] @relation("ThatGlobalProblemRelation")
  averageAllocation            Float?                        @map("average_allocation")
  status                       String
  creator                      User                          @relation(fields: [creatorId], references: [id])
  creatorId                    String
  globalSolutions              GlobalSolution[]
  problemCategories            ProblemCategory[]
  problemTags                  ProblemTag[]
  votes                        GlobalProblemVote[]

  @@map("global_problems")
}

model GlobalProblemPairAllocation {
  id                          String        @id @default(cuid())
  userId                      String        @map("user_id")
  thisGlobalProblemId         String        @map("this_global_problem_id")
  thatGlobalProblemId         String        @map("that_global_problem_id")
  thisGlobalProblemPercentage Float         @map("this_global_problem_percentage")
  createdAt                   DateTime      @default(now()) @map("created_at")
  updatedAt                   DateTime      @updatedAt @map("updated_at")
  user                        User          @relation(fields: [userId], references: [id])
  thisGlobalProblem           GlobalProblem @relation("ThisGlobalProblemRelation", fields: [thisGlobalProblemId], references: [id])
  thatGlobalProblem           GlobalProblem @relation("ThatGlobalProblemRelation", fields: [thatGlobalProblemId], references: [id])

  @@map("global_problem_pair_allocations")
}

model WishingWell {
  id                         String                      @id @default(cuid())
  userId                     String                      @map("user_id")
  name                       String                      @unique
  description                String?
  content                    String?                     @map("content")
  images                     String[]
  featuredImage              String?                     @map("featured_image")
  createdAt                  DateTime                    @default(now()) @map("created_at")
  updatedAt                  DateTime                    @updatedAt @map("updated_at")
  user                       User                        @relation(fields: [userId], references: [id])
  wishingWellContributions   WishingWellContribution[]
  proposals                  WishFulfillmentProposal[]
  thisWishingWellAllocations WishingWellPairAllocation[] @relation("ThisWishingWellRelation")
  thatWishingWellAllocations WishingWellPairAllocation[] @relation("ThatWishingWellRelation")
  averageAllocation          Float?                      @map("average_allocation")

  @@map("wishing_wells")
}

model WishingWellPairAllocation {
  id                        String      @id @default(cuid())
  userId                    String      @map("user_id")
  thisWishingWellId         String      @map("this_wishing_well_id")
  thatWishingWellId         String      @map("that_wishing_well_id")
  thisWishingWellPercentage Float       @map("this_wishing_well_percentage")
  createdAt                 DateTime    @default(now()) @map("created_at")
  updatedAt                 DateTime    @updatedAt @map("updated_at")
  user                      User        @relation(fields: [userId], references: [id])
  thisWishingWell           WishingWell @relation("ThisWishingWellRelation", fields: [thisWishingWellId], references: [id])
  thatWishingWell           WishingWell @relation("ThatWishingWellRelation", fields: [thatWishingWellId], references: [id])

  @@map("wishing_well_pair_allocations")
}

model WishingWellContribution {
  id            String      @id @default(cuid())
  wishingWellId String      @map("wishing_well_id")
  date          DateTime    @default(now())
  count         Int         @default(1)
  wishingWell   WishingWell @relation(fields: [wishingWellId], references: [id])

  @@map("wishing_well_contributions")
}

model GenieDAO {
  id             String                    @id @default(cuid())
  name           String
  reputation     Float                     @default(0)
  createdAt      DateTime                  @default(now()) @map("created_at")
  updatedAt      DateTime                  @updatedAt @map("updated_at")
  creator        User                      @relation("CreatedGenieDAOs", fields: [creatorId], references: [id])
  creatorId      String
  members        User[]                    @relation("JoinedGenieDAOs")
  proposals      WishFulfillmentProposal[]
  collaborations WishFulfillmentProposal[] @relation("ProposalCollaborators")
  feedback       GenieDAOFeedback[]

  @@map("genie_daos")
}

model WishFulfillmentProposal {
  id            String                   @id @default(cuid())
  wishingWellId String                   @map("wishing_well_id")
  genieDAOId    String                   @map("genie_dao_id")
  description   String
  leadIndicator String
  lagIndicator  String
  wishTokens    Int
  createdAt     DateTime                 @default(now()) @map("created_at")
  updatedAt     DateTime                 @updatedAt @map("updated_at")
  wishingWell   WishingWell              @relation(fields: [wishingWellId], references: [id])
  genieDAO      GenieDAO                 @relation(fields: [genieDAOId], references: [id])
  collaborators GenieDAO[]               @relation("ProposalCollaborators")
  reports       ProposalProgressReport[]
  creator       User                     @relation("CreatedProposals", fields: [creatorId], references: [id])
  creatorId     String

  @@map("wish_fulfillment_proposals")
}

model ProposalProgressReport {
  id         String                  @id @default(cuid())
  proposalId String                  @map("proposal_id")
  content    String
  createdAt  DateTime                @default(now()) @map("created_at")
  updatedAt  DateTime                @updatedAt @map("updated_at")
  proposal   WishFulfillmentProposal @relation(fields: [proposalId], references: [id])
  creator    User                    @relation(fields: [creatorId], references: [id])
  creatorId  String

  @@map("proposal_progress_reports")
}

model ProposalComparison {
  id                     String   @id @default(cuid())
  userId                 String   @map("user_id")
  thisProposalId         String   @map("this_proposal_id")
  thatProposalId         String   @map("that_proposal_id")
  thisProposalPercentage Float    @map("this_proposal_percentage")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  user                   User     @relation(fields: [userId], references: [id])

  @@map("proposal_comparisons")
}

model GenieDAOFeedback {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  genieDAOId String   @map("genie_dao_id")
  rating     Float
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  genieDAO   GenieDAO @relation(fields: [genieDAOId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("genie_dao_feedback")
}

model GlobalProblemVote {
  id              String        @id @default(cuid())
  globalProblem   GlobalProblem @relation(fields: [globalProblemId], references: [id])
  globalProblemId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  vote            Int
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("global_problem_votes")
}

model GlobalSolution {
  id                 String               @id @default(cuid())
  globalProblem      GlobalProblem        @relation(fields: [globalProblemId], references: [id])
  globalProblemId    String
  title              String
  description        String
  status             String
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  creator            User                 @relation(fields: [creatorId], references: [id])
  creatorId          String
  globalTasks        GlobalTask[]
  solutionCategories SolutionCategory[]
  solutionTags       SolutionTag[]
  votes              GlobalSolutionVote[]

  @@map("global_solutions")
}

model GlobalSolutionVote {
  id               String         @id @default(cuid())
  globalSolution   GlobalSolution @relation(fields: [globalSolutionId], references: [id])
  globalSolutionId String
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  vote             Int
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("global_solution_votes")
}

model GlobalTask {
  id               String         @id @default(cuid())
  globalSolution   GlobalSolution @relation(fields: [globalSolutionId], references: [id])
  globalSolutionId String
  title            String
  description      String
  status           String
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  userTasks        UserTask[]
  taskCategories   TaskCategory[]
  taskTags         TaskTag[]
  bids             Bid[]
  budget           Budget?
  rewards          Reward[]
  User             User?          @relation(fields: [userId], references: [id])
  userId           String?

  @@map("global_tasks")
}

model UserTask {
  id           String     @id @default(cuid())
  globalTask   GlobalTask @relation(fields: [globalTaskId], references: [id])
  globalTaskId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  status       String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("user_tasks")
}

model Bid {
  id           String     @id @default(cuid())
  globalTask   GlobalTask @relation(fields: [globalTaskId], references: [id])
  globalTaskId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  amount       Float
  status       String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("bids")
}

model ProblemCategory {
  id             String          @id @default(cuid())
  name           String
  globalProblems GlobalProblem[]

  @@map("problem_categories")
}

model ProblemTag {
  id             String          @id @default(cuid())
  name           String
  globalProblems GlobalProblem[]

  @@map("problem_tags")
}

model SolutionCategory {
  id              String           @id @default(cuid())
  name            String
  globalSolutions GlobalSolution[]

  @@map("solution_categories")
}

model SolutionTag {
  id              String           @id @default(cuid())
  name            String
  globalSolutions GlobalSolution[]

  @@map("solution_tags")
}

model TaskCategory {
  id          String       @id @default(cuid())
  name        String
  globalTasks GlobalTask[]

  @@map("task_categories")
}

model TaskTag {
  id          String       @id @default(cuid())
  name        String
  globalTasks GlobalTask[]

  @@map("task_tags")
}

model Budget {
  id           String     @id @default(cuid())
  globalTask   GlobalTask @relation(fields: [globalTaskId], references: [id])
  globalTaskId String     @unique
  amount       Float
  status       String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("budgets")
}

model Reward {
  id           String     @id @default(cuid())
  globalTask   GlobalTask @relation(fields: [globalTaskId], references: [id])
  globalTaskId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  amount       Float
  status       String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("rewards")
}
