generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String   @map(name: "provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String    @id @default(cuid())
  address                  String?
  badges                   Json?
  banned                   Boolean?
  birthday                 DateTime?
  city                     String?
  countryCode              String?
  createdAt                DateTime  @default(now())
  deletedAt                DateTime?
  email                    String?   @unique
  emailValidated           Boolean   @default(false)
  firstName                String?
  gdprConsent              Boolean   @default(false)
  gender                   String?
  image                    String?
  ipAddress                String?   @db.VarChar(45)
  language                 String?
  lastName                 String?
  lastSignInAt             BigInt?
  name                     String?
  newsletterSubscribed     Boolean   @default(false)
  phoneNumber              String?
  points                   Int?
  postalCode               String?
  primaryWeb3WalletAddress String?
  profileImageUrl          String?
  referrerUserId           String?
  signatureTimestamp       DateTime  @default(now())
  signedPetition           Boolean   @default(false)
  stateProvince            String?
  updatedAt                DateTime  @updatedAt
  username                 String    @unique @default(uuid())
  warPercentageDesired     Float?
  warPercentageGuessed     Float?
  web3Wallet               String?
  unsafeMetadata           Json?
  publicMetadata           Json?
  privateMetadata          Json?

  accounts Account[]
  sessions Session[]
  Activity Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  colorCode   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  activityLogs ActivityLog[]
}

model ActivityLog {
  id         String   @id @default(cuid())
  activityId String
  date       DateTime @default(now())
  count      Int      @default(1)

  activity Activity @relation(fields: [activityId], references: [id])
}
